<?php

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function tennis_weather_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.tennis_weather':
      //TODO write help page content
      //(see Drupal\loremipsum\loremipsum.module for reference)
      return t('<h2>[TITLE]</h2><p>[CONTENT]');
  }
}

/**
 * Implements hook_theme().
 */
function tennis_weather_theme($existing, $type, $theme, $path) {
  $variables = array(
    'tennis_weather' => array(
      'variables' => array( 'subheading' => NULL,
                            'summary' => NULL,
                            'database_test' => NULL,
                            'current_cond' => NULL,
                            'timestamp' => NULL,
                            'forecast' => NULL,
                            'current_icon' => NULL,
                            'debug_info' => NULL,
                            'radar_gif' => NULL,
                            'map_img' => NULL,
                          ),
      'template' => 'tennis_weather',
    ),
  );

  return $variables;
}


/**
 * Template preprocess function for Tennis Weather Checker.
 * Dynamically change formatting (color, emphasis, etc.) of forecast info.
 * @param variables
 *   An associative array containing:
 *   - forecast
 */
function template_preprocess_tennis_weather(&$variables) {
  // If error, return without doing anything
  if (array_key_exists('error', $variables['debug_info'])) {
    return;
  }

  // Load settings
  $config = \Drupal::config('tennis_weather.settings');
  $temp_max = $config->get('tennis_weather.temp_max');
  $temp_warn = $config->get('tennis_weather.temp_warn');
  $wind_max = $config->get('tennis_weather.wind_max');
  $wind_warn = $config->get('tennis_weather.wind_warn');
  $precip_max = $config->get('tennis_weather.precip_max');
  $precip_warn = $config->get('tennis_weather.precip_warn');
  $start_hr = $config->get('tennis_weather.start_hr');
  $start_ampm = $config->get('tennis_weather.start_ampm');
  $end_hr = $config->get('tennis_weather.end_hr');
  $end_ampm = $config->get('tennis_weather.end_ampm');

  foreach ($variables['forecast'] as &$hourForecast) {
    // TODO: use SafeMarkup?

    // Convert 24 hour to 12 hour AM/PM
    if ($hourForecast->FCTTIME->hour == 0 || $hourForecast->FCTTIME->hour == 12) {
      $hourForecast->FCTTIME->hour = 12;
    }
    else if ($hourForecast->FCTTIME->hour > 12) {
      $hourForecast->FCTTIME->hour = $hourForecast->FCTTIME->hour - 12;
    }

    $temp = $hourForecast->temp->english; // max length: 3
    $tempUnitsF = ' &deg;F';
    $tempUnitsC = ' &deg;C';
    $wind = $hourForecast->wspd->english; // max length: 3
    $windUnitsMPH = ' mph';
    $precip = $hourForecast->pop . ' %'; // max length: 5

    $paddedTime = sprintf("%'_-2s %s ", $hourForecast->FCTTIME->hour, $hourForecast->FCTTIME->ampm);
    $paddedTime = str_replace("_", "&nbsp;", $paddedTime);

    $paddedTemp = sprintf("Temperature: %'_3s %s", $temp, $tempUnitsF);
    $paddedTemp = str_replace("_", "&nbsp;", $paddedTemp);

    $paddedWind = sprintf("Wind: %'_3s %s", $wind, $windUnitsMPH);
    $paddedWind = str_replace("_", "&nbsp;", $paddedWind);

    $paddedPrecip = sprintf("Chance of precipitation: %'_5s", $precip);
    $paddedPrecip = str_replace("_", "&nbsp;", $paddedPrecip);

    $formattedTime = $paddedTime;
    $formattedTemp = $paddedTemp;
    $formattedWind = $paddedWind;
    $formattedPrecip = $paddedPrecip;

    // Change color of time text depending on weather conditions
    if ($hourForecast->temp->english >= $temp_max || $hourForecast->wspd->english >= $wind_max || $hourForecast->pop >= $precip_max) {
      $formattedTime = "<font color=red><b>" . $paddedTime . "</b></font>";
    }
    else if ($hourForecast->temp->english >= $temp_warn || $hourForecast->wspd->english >= $wind_warn || $hourForecast->pop >= $precip_warn) {
      $formattedTime = "<font color=orange><b>" . $paddedTime . "</b></font>";
    }
    else {
      $formattedTime = "<font color=green><b>" . $paddedTime . "</b></font>";
    }

    /**
    * Bold problematic part(s) of forecast
    **/
    // Check temperature
    if ($hourForecast->temp->english >= $temp_warn) {
      $formattedTemp = "<b>". $paddedTemp ."</b>";
    }
    // Check windspeed
    if ($hourForecast->wspd->english >= $wind_warn) {
      $formattedWind = "<b>". $paddedWind ."</b>";
    }
    // Check precipitation probability
    if ($hourForecast->pop >= $precip_warn) {
      $formattedPrecip = "<b>". $paddedPrecip ."</b>";
    }

    $hourForecast = $formattedTime . '&emsp;' . $formattedTemp . '&emsp;&emsp;&emsp;' . $formattedWind . '&emsp;&emsp;&emsp;' . $formattedPrecip;
  }

  // Conditional formatting of forecast summary text
  // TODO: make these criteria configurable
  if ($variables['summary']['today']['value'] > 1) {
    $variables['summary']['today'] = '<font color=orange><b>'. sprintf($variables['summary']['today']['string'], $variables['summary']['today']['value']) . '</b></font>';
  }
  else {
    $variables['summary']['today'] = sprintf($variables['summary']['today']['string'], $variables['summary']['today']['value']);
  }

  if ($variables['summary']['hr']['value'] > 1) {
    $variables['summary']['hr'] = '<font color=red><b>'. sprintf($variables['summary']['hr']['string'], $variables['summary']['hr']['value']) . '</b></font>';
  }
  else if ($variables['summary']['hr']['value'] > .1) {
    $variables['summary']['hr'] = '<font color=orange><b>'. sprintf($variables['summary']['hr']['string'], $variables['summary']['hr']['value']) . '</b></font>';
  }
  else {
    $variables['summary']['hr'] = sprintf($variables['summary']['hr']['string'], $variables['summary']['hr']['value']);
  }
}
